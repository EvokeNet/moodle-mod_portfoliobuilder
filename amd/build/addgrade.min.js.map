{"version":3,"file":"addgrade.min.js","sources":["../src/addgrade.js"],"sourcesContent":["/**\n * Add grade js logic.\n *\n * @copyright   2023 World Bank Group <https://worldbank.org>\n * @author      Willian Mano <willianmanoaraujo@gmail.com>\n */\n\n/* eslint-disable */\ndefine([\n        'jquery',\n        'core/config',\n        'core/str',\n        'core/modal_factory',\n        'core/modal_events',\n        'core/fragment',\n        'core/ajax',\n        'mod_portfoliobuilder/sweetalert',\n        'core/yui'],\n    function($, Config, Str, ModalFactory, ModalEvents, Fragment, Ajax, Swal, Y) {\n        /**\n         * Constructor for the AddGrade.\n         *\n         * @param selector The selector to open the modal\n         * @param contextid The course module contextid\n         */\n        var AddGrade = function(contextid) {\n            this.contextid = contextid;\n\n            this.registerEventListeners();\n        };\n\n        /**\n         * @var {Modal} modal\n         * @private\n         */\n        AddGrade.prototype.modal = null;\n\n        /**\n         * @var {int} contextid\n         * @private\n         */\n        AddGrade.prototype.contextid = -1;\n\n        /**\n         * @var {int} gradebutton\n         * @private\n         */\n        AddGrade.prototype.gradebutton = -1;\n\n        AddGrade.prototype.registerEventListeners = function() {\n            $(\".grade-portfolio\").click(function(event) {\n                this.gradebutton = $(event.currentTarget);\n\n                this.openModal(this.gradebutton.data('portfolioid'), this.gradebutton.data('userid'));\n            }.bind(this));\n        };\n\n        AddGrade.prototype.openModal = function(portfolioid, userid) {\n            ModalFactory.create({\n                type: ModalFactory.types.SAVE_CANCEL,\n                title: 'Add grade',\n                body: this.getBody({instanceid: portfolioid, userid: userid}),\n            }).then(function(modal) {\n                this.modal = modal;\n\n                // We want to reset the form every time it is opened.\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    this.modal.setBody(this.getBody({instanceid: portfolioid, userid: userid}));\n                }.bind(this));\n\n                // We want to hide the submit buttons every time it is opened.\n                this.modal.getRoot().on(ModalEvents.shown, function() {\n                    this.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                }.bind(this));\n\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n                this.modal.show();\n            }.bind(this));\n        };\n\n        /**\n         * @method getBody\n         *\n         * @private\n         *\n         * @return {Promise}\n         */\n        AddGrade.prototype.getBody = function(formdata) {\n            if (typeof formdata === \"undefined\") {\n                formdata = {};\n            }\n\n            // Get the content of the modal.\n            var params = {jsonformdata: JSON.stringify(formdata)};\n\n            return Fragment.loadFragment('mod_portfoliobuilder', 'grade_form', this.contextid, params);\n        };\n\n        /**\n         * @method handleFormSubmissionResponse\n         *\n         * @private\n         *\n         * @return {Promise}\n         */\n        AddGrade.prototype.handleFormSubmissionResponse = function(data) {\n            this.modal.hide();\n            document.location.reload();\n        };\n\n        /**\n         * @method handleFormSubmissionFailure\n         *\n         * @private\n         *\n         * @return {Promise}\n         */\n        AddGrade.prototype.handleFormSubmissionFailure = function(data) {\n            // Oh noes! Epic fail :(\n            // Ah wait - this is normal. We need to re-display the form with errors!\n            this.modal.setBody(this.getBody(data));\n        };\n\n        /**\n         * Private method\n         *\n         * @method submitFormAjax\n         *\n         * @private\n         *\n         * @param {Event} e Form submission event.\n         */\n        AddGrade.prototype.submitFormAjax = function(e) {\n            // We don't want to do a real form submission.\n            e.preventDefault();\n\n            var changeEvent = document.createEvent('HTMLEvents');\n            changeEvent.initEvent('change', true, true);\n\n            // Prompt all inputs to run their validation functions.\n            // Normally this would happen when the form is submitted, but\n            // since we aren't submitting the form normally we need to run client side\n            // validation.\n            this.modal.getRoot().find(':input').each(function(index, element) {\n                element.dispatchEvent(changeEvent);\n            });\n\n            // Now the change events have run, see if there are any \"invalid\" form fields.\n            var invalid = $.merge(\n                this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n                this.modal.getRoot().find('.error')\n            );\n\n            // If we found invalid fields, focus on the first one and do not submit via ajax.\n            if (invalid.length) {\n                invalid.first().focus();\n                return;\n            }\n\n            // Convert all the form elements values to a serialised string.\n            var formData = this.modal.getRoot().find('form').serialize();\n\n            // Now we can continue...\n            Ajax.call([{\n                methodname: 'mod_portfoliobuilder_gradeportfolio',\n                args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\n                done: this.handleFormSubmissionResponse.bind(this),\n                fail: this.handleFormSubmissionFailure.bind(this, formData)\n            }]);\n        };\n\n        /**\n         * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n         *\n         * @method submitForm\n         * @param {Event} e Form submission event.\n         * @private\n         */\n        AddGrade.prototype.submitForm = function(e) {\n            e.preventDefault();\n\n            this.modal.getRoot().find('form').submit();\n        };\n\n        return {\n            init: function(contextid) {\n                return new AddGrade(contextid);\n            }\n        };\n    }\n);\n"],"names":["define","$","Config","Str","ModalFactory","ModalEvents","Fragment","Ajax","Swal","Y","AddGrade","contextid","registerEventListeners","prototype","modal","gradebutton","click","event","currentTarget","openModal","this","data","bind","portfolioid","userid","create","type","types","SAVE_CANCEL","title","body","getBody","instanceid","then","getRoot","on","hidden","setBody","shown","append","save","submitForm","submitFormAjax","show","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","hide","document","location","reload","handleFormSubmissionFailure","e","preventDefault","changeEvent","createEvent","initEvent","find","each","index","element","dispatchEvent","invalid","merge","length","first","focus","formData","serialize","call","methodname","args","done","fail","submit","init"],"mappings":"AAQAA,uCAAO,CACC,SACA,cACA,WACA,qBACA,oBACA,gBACA,YACA,kCACA,aACJ,SAASC,EAAGC,OAAQC,IAAKC,aAAcC,YAAaC,SAAUC,KAAMC,KAAMC,OAOlEC,SAAW,SAASC,gBACfA,UAAYA,eAEZC,iCAOTF,SAASG,UAAUC,MAAQ,KAM3BJ,SAASG,UAAUF,WAAa,EAMhCD,SAASG,UAAUE,aAAe,EAElCL,SAASG,UAAUD,uBAAyB,WACxCX,EAAE,oBAAoBe,MAAM,SAASC,YAC5BF,YAAcd,EAAEgB,MAAMC,oBAEtBC,UAAUC,KAAKL,YAAYM,KAAK,eAAgBD,KAAKL,YAAYM,KAAK,YAC7EC,KAAKF,QAGXV,SAASG,UAAUM,UAAY,SAASI,YAAaC,QACjDpB,aAAaqB,OAAO,CAChBC,KAAMtB,aAAauB,MAAMC,YACzBC,MAAO,YACPC,KAAMV,KAAKW,QAAQ,CAACC,WAAYT,YAAaC,OAAQA,WACtDS,KAAK,SAASnB,YACRA,MAAQA,WAGRA,MAAMoB,UAAUC,GAAG9B,YAAY+B,OAAQ,gBACnCtB,MAAMuB,QAAQjB,KAAKW,QAAQ,CAACC,WAAYT,YAAaC,OAAQA,WACpEF,KAAKF,YAGFN,MAAMoB,UAAUC,GAAG9B,YAAYiC,MAAO,gBAClCxB,MAAMoB,UAAUK,OAAO,0EAC9BjB,KAAKF,YAIFN,MAAMoB,UAAUC,GAAG9B,YAAYmC,KAAMpB,KAAKqB,WAAWnB,KAAKF,YAE1DN,MAAMoB,UAAUC,GAAG,SAAU,OAAQf,KAAKsB,eAAepB,KAAKF,YAE9DN,MAAM6B,QACbrB,KAAKF,QAUXV,SAASG,UAAUkB,QAAU,SAASa,eACV,IAAbA,WACPA,SAAW,QAIXC,OAAS,CAACC,aAAcC,KAAKC,UAAUJ,kBAEpCtC,SAAS2C,aAAa,uBAAwB,aAAc7B,KAAKT,UAAWkC,SAUvFnC,SAASG,UAAUqC,6BAA+B,SAAS7B,WAClDP,MAAMqC,OACXC,SAASC,SAASC,UAUtB5C,SAASG,UAAU0C,4BAA8B,SAASlC,WAGjDP,MAAMuB,QAAQjB,KAAKW,QAAQV,QAYpCX,SAASG,UAAU6B,eAAiB,SAASc,GAEzCA,EAAEC,qBAEEC,YAAcN,SAASO,YAAY,cACvCD,YAAYE,UAAU,UAAU,GAAM,QAMjC9C,MAAMoB,UAAU2B,KAAK,UAAUC,MAAK,SAASC,MAAOC,SACrDA,QAAQC,cAAcP,oBAItBQ,QAAUjE,EAAEkE,MACZ/C,KAAKN,MAAMoB,UAAU2B,KAAK,yBAC1BzC,KAAKN,MAAMoB,UAAU2B,KAAK,cAI1BK,QAAQE,OACRF,QAAQG,QAAQC,iBAKhBC,SAAWnD,KAAKN,MAAMoB,UAAU2B,KAAK,QAAQW,YAGjDjE,KAAKkE,KAAK,CAAC,CACPC,WAAY,sCACZC,KAAM,CAAChE,UAAWS,KAAKT,UAAWmC,aAAcC,KAAKC,UAAUuB,WAC/DK,KAAMxD,KAAK8B,6BAA6B5B,KAAKF,MAC7CyD,KAAMzD,KAAKmC,4BAA4BjC,KAAKF,KAAMmD,eAW1D7D,SAASG,UAAU4B,WAAa,SAASe,GACrCA,EAAEC,sBAEG3C,MAAMoB,UAAU2B,KAAK,QAAQiB,UAG/B,CACHC,KAAM,SAASpE,kBACJ,IAAID,SAASC"}