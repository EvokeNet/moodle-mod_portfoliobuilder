{"version":3,"file":"portfolios.min.js","sources":["../src/portfolios.js"],"sourcesContent":["/**\n * Some UI stuff for portfolios page.\n *\n * @copyright   2023 World Bank Group <https://worldbank.org>\n * @author      Willian Mano <willianmanoaraujo@gmail.com>\n */\n\nimport * as DynamicTable from 'core_table/dynamic';\nimport * as Str from 'core/str';\nimport CheckboxToggleAll from 'core/checkbox-toggleall';\nimport CustomEvents from 'core/custom_interaction_events';\nimport DynamicTableSelectors from 'core_table/local/dynamic/selectors';\nimport ModalEvents from 'core/modal_events';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport jQuery from 'jquery';\nimport {showAddNote, showSendMessage} from 'mod_portfoliobuilder/local/portfolios/bulkactions';\n/* eslint-disable */\nconst Selectors = {\n    bulkActionSelect: \"#formactionid\",\n    bulkUserSelectedCheckBoxes: \"input[data-togglegroup='portfolios-table'][data-toggle='slave']:checked\",\n    checkCountButton: \"#checkall\",\n    showCountText: '[data-region=\"portfolios-count\"]',\n    showCountToggle: '[data-action=\"showcount\"]',\n    stateHelpIcon: '[data-region=\"state-help-icon\"]',\n    tableForm: uniqueId => `form[data-table-unique-id=\"${uniqueId}\"]`,\n};\n\nexport const init = ({\n                         uniqueid,\n                         noteStateNames = {},\n                     }) => {\n    const root = document.querySelector(Selectors.tableForm(uniqueid));\n    const getTableFromUniqueId = uniqueId => root.querySelector(DynamicTableSelectors.main.fromRegionId(uniqueId));\n\n    /**\n     * Private method.\n     *\n     * @method registerEventListeners\n     * @private\n     */\n    const registerEventListeners = () => {\n        CustomEvents.define(Selectors.bulkActionSelect, [CustomEvents.events.accessibleChange]);\n        jQuery(Selectors.bulkActionSelect).on(CustomEvents.events.accessibleChange, e => {\n            const bulkActionSelect = e.target.closest('select');\n            const action = bulkActionSelect.value;\n            const tableRoot = getTableFromUniqueId(uniqueid);\n            const checkboxes = tableRoot.querySelectorAll(Selectors.bulkUserSelectedCheckBoxes);\n            const pendingPromise = new Pending('mod_portfoliobuilder/portfolios:bulkActionSelect');\n\n            if (action.indexOf('#') !== -1) {\n                e.preventDefault();\n\n                const ids = [];\n                checkboxes.forEach(checkbox => {\n                    ids.push(checkbox.getAttribute('name').replace('user', ''));\n                });\n\n                let bulkAction;\n                if (action === '#messageselect') {\n                    bulkAction = showSendMessage(ids);\n                } else if (action === '#addgroupnote') {\n                    bulkAction = showAddNote(\n                        root.dataset.courseId,\n                        ids,\n                        noteStateNames,\n                        root.querySelector(Selectors.stateHelpIcon)\n                    );\n                }\n\n                if (bulkAction) {\n                    const pendingBulkAction = new Pending('mod_portfoliobuilder/portfolios:bulkActionSelected');\n                    bulkAction\n                        .then(modal => {\n                            modal.getRoot().on(ModalEvents.hidden, () => {\n                                // Focus on the action select when the dialog is closed.\n                                bulkActionSelect.focus();\n                            });\n\n                            pendingBulkAction.resolve();\n                            return modal;\n                        })\n                        .catch(Notification.exception);\n                }\n            } else if (action !== '' && checkboxes.length) {\n                bulkActionSelect.form.submit();\n            }\n\n            resetBulkAction(bulkActionSelect);\n            pendingPromise.resolve();\n        });\n\n        root.addEventListener('click', e => {\n            // Handle clicking of the \"Show [all|count]\" and \"Select all\" actions.\n            const showCountLink = root.querySelector(Selectors.showCountToggle);\n            const checkCountButton = root.querySelector(Selectors.checkCountButton);\n\n            const showCountLinkClicked = showCountLink && showCountLink.contains(e.target);\n            const checkCountButtonClicked = checkCountButton && checkCountButton.contains(e.target);\n\n            if (showCountLinkClicked || checkCountButtonClicked) {\n                e.preventDefault();\n\n                const tableRoot = getTableFromUniqueId(uniqueid);\n\n                DynamicTable.setPageSize(tableRoot, showCountLink.dataset.targetPageSize)\n                    .then(tableRoot => {\n                        // Always update the toggle state.\n                        // This ensures that the bulk actions are disabled after changing the page size.\n                        CheckboxToggleAll.setGroupState(root, 'portfolios-table', checkCountButtonClicked);\n\n                        return tableRoot;\n                    })\n                    .catch(Notification.exception);\n            }\n        });\n\n        // When the content is refreshed, update the row counts in various places.\n        root.addEventListener(DynamicTable.Events.tableContentRefreshed, e => {\n            const showCountLink = root.querySelector(Selectors.showCountToggle);\n            const checkCountButton = root.querySelector(Selectors.checkCountButton);\n\n            const tableRoot = e.target;\n\n            const defaultPageSize = parseInt(root.dataset.tableDefaultPerPage, 10);\n            const currentPageSize = parseInt(tableRoot.dataset.tablePageSize, 10);\n            const totalRowCount = parseInt(tableRoot.dataset.tableTotalRows, 10);\n\n            CheckboxToggleAll.updateSlavesFromMasterState(root, 'portfolios-table');\n\n            const pageCountStrings = [\n                {\n                    key: 'countparticipantsfound',\n                    component: 'core_user',\n                    param: totalRowCount,\n                },\n            ];\n\n\n            if (totalRowCount <= defaultPageSize) {\n                // There are fewer than the default page count numbers of rows.\n                showCountLink.classList.add('hidden');\n\n                if (checkCountButton) {\n                    checkCountButton.classList.add('hidden');\n                }\n            } else if (totalRowCount <= currentPageSize) {\n                // The are fewer than the current page size.\n                pageCountStrings.push({\n                    key: 'showperpage',\n                    component: 'core',\n                    param: defaultPageSize,\n                });\n\n                pageCountStrings.push({\n                    key: 'selectalluserswithcount',\n                    component: 'core',\n                    param: defaultPageSize,\n                });\n\n                // Show the 'Show [x]' link.\n                showCountLink.classList.remove('hidden');\n                showCountLink.dataset.targetPageSize = defaultPageSize;\n\n                if (checkCountButton) {\n                    // The 'Check all [x]' button is only visible when there are values to set.\n                    checkCountButton.classList.add('hidden');\n                }\n            } else {\n                pageCountStrings.push({\n                    key: 'showall',\n                    component: 'core',\n                    param: totalRowCount,\n                });\n\n                pageCountStrings.push({\n                    key: 'selectalluserswithcount',\n                    component: 'core',\n                    param: totalRowCount,\n                });\n                console.log(showCountLink);\n                // Show both the 'Show [x]' link, and the 'Check all [x]' button.\n                showCountLink.classList.remove('hidden');\n                showCountLink.dataset.targetPageSize = totalRowCount;\n\n                if (checkCountButton) {\n                    checkCountButton.classList.remove('hidden');\n                }\n            }\n\n            Str.get_strings(pageCountStrings)\n                .then(([showingParticipantCountString, showCountString, selectCountString]) => {\n                    const showingParticipantCount = root.querySelector(Selectors.showCountText);\n                    console.log(showingParticipantCount);\n                    showingParticipantCount.innerHTML = showingParticipantCountString;\n\n                    if (showCountString) {\n                        showCountLink.innerHTML = showCountString;\n                    }\n\n                    if (selectCountString && checkCountButton) {\n                        checkCountButton.value = selectCountString;\n                    }\n\n                    return;\n                })\n                .catch(Notification.exception);\n        });\n    };\n\n    const resetBulkAction = bulkActionSelect => {\n        bulkActionSelect.value = '';\n    };\n\n    registerEventListeners();\n};\n"],"names":["Selectors","uniqueId","_ref","uniqueid","noteStateNames","root","document","querySelector","getTableFromUniqueId","DynamicTableSelectors","main","fromRegionId","resetBulkAction","bulkActionSelect","value","define","CustomEvents","events","accessibleChange","on","e","target","closest","action","checkboxes","querySelectorAll","pendingPromise","Pending","indexOf","preventDefault","ids","bulkAction","forEach","checkbox","push","getAttribute","replace","dataset","courseId","pendingBulkAction","then","modal","getRoot","ModalEvents","hidden","focus","resolve","catch","Notification","exception","length","form","submit","addEventListener","showCountLink","checkCountButton","showCountLinkClicked","contains","checkCountButtonClicked","tableRoot","DynamicTable","setPageSize","targetPageSize","setGroupState","Events","tableContentRefreshed","defaultPageSize","parseInt","tableDefaultPerPage","currentPageSize","tablePageSize","totalRowCount","tableTotalRows","updateSlavesFromMasterState","pageCountStrings","key","component","param","classList","add","remove","console","log","Str","get_strings","_ref2","showingParticipantCountString","showCountString","selectCountString","showingParticipantCount","innerHTML"],"mappings":"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"}